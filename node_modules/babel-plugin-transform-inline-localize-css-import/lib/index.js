'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

exports.default = function (_ref4) {
  var t = _ref4.types;

  return {
    visitor: {
      ImportDeclaration: function ImportDeclaration(path, state) {
        if (!/\.css$/.test(path.node.source.value)) {
          return;
        }

        var localFormat = state.opts.localFormat;
        var jsFilePath = state.file.log.filename;
        var cssFilePath = (0, _path.join)((0, _path.dirname)(jsFilePath), path.node.source.value);
        var jsFilename = (0, _path.basename)(jsFilePath, (0, _path.extname)(jsFilePath));
        var cssFilename = (0, _path.basename)(cssFilePath, (0, _path.extname)(cssFilePath));

        var fileContent = (0, _fs.readFileSync)(cssFilePath).toString();

        var classNames = (0, _cssom.parse)(fileContent).cssRules.reduce(function (res, rule) {
          if (rule.type !== _cssom.CSSRule.STYLE_RULE) return res;

          if (rule.style['animation-name'] !== undefined) {
            var token = rule.style['animation-name'];
            var newToken = localize({ localFormat: localFormat, token: token, jsFilename: jsFilename, cssFilename: cssFilename });
            fileContent = fileContent.replace(new RegExp('animation-name: ' + token + '\\b', 'g'), 'animation-name: ' + newToken);

            fileContent = fileContent.replace(new RegExp('@keyframes ' + token + '\\b', 'g'), '@keyframes ' + newToken);
          }

          var classNamesFromSelector = extractClassNames((0, _cssSelectorTokenizer.parse)(rule.selectorText));
          var newClassNames = classNamesFromSelector.reduce(function (_res, token) {
            if (res.hasOwnProperty(token)) return _res;
            var newClassName = localize({ localFormat: localFormat, token: token, jsFilename: jsFilename, cssFilename: cssFilename });
            var search = new RegExp('\\.' + token + '\\b', 'g');
            fileContent = fileContent.replace(search, '.' + newClassName);
            return (0, _extends4.default)({}, _res, (0, _defineProperty3.default)({}, token, newClassName));
          }, {});

          return (0, _extends4.default)({}, res, newClassNames);
        }, {});

        path.replaceWith(t.variableDeclaration('var', [t.variableDeclarator(t.identifier(path.node.specifiers[0].local.name), t.objectExpression([t.ObjectProperty(t.identifier('code'), t.stringLiteral(fileContent)), t.ObjectProperty(t.identifier('classNames'), t.objectExpression(objectToObjectProperties(classNames, t)))]))]));
      }
    }
  };
};

var _fs = require('fs');

var _path = require('path');

var _cssom = require('cssom');

var _cssSelectorTokenizer = require('css-selector-tokenizer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// turns {some: 'object'} to AST
// what this Babel plugins does:
// turns import theme from './theme.css';
// into
// var theme = {
//   code: '.css {code with class names and animation names transformed}',
//   classNames: {mapOfTransformedClassNames}
// }

/* eslint-disable new-cap */

var objectToObjectProperties = function objectToObjectProperties(object, t) {
  return (0, _entries2.default)(object).map(function (_ref) {
    var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

    var name = _ref2[0];
    var val = _ref2[1];
    return t.ObjectProperty(t.identifier(name), t.stringLiteral(val));
  });
};

var extractClassNames = function extractClassNames(node) {
  var classNames = [];

  if (node.type === 'selectors' || node.nodes !== undefined) {
    classNames.push.apply(classNames, (0, _toConsumableArray3.default)(extractClassNames(node.nodes)));
  } else if (Array.isArray(node)) {
    node.forEach(function (subNode) {
      classNames.push.apply(classNames, (0, _toConsumableArray3.default)(extractClassNames(subNode)));
    });
  } else if (node.type === 'class') {
    classNames.push(node.name);
  }

  return classNames;
};

var localize = function localize(_ref3) {
  var _ref3$localFormat = _ref3.localFormat;
  var localFormat = _ref3$localFormat === undefined ? '$cssFilename__$token' : _ref3$localFormat;
  var jsFilename = _ref3.jsFilename;
  var cssFilename = _ref3.cssFilename;
  var token = _ref3.token;
  return localFormat.replace(new RegExp('\\$jsFilename', 'g'), jsFilename).replace(new RegExp('\\$cssFilename', 'g'), cssFilename).replace(new RegExp('\\$token', 'g'), token);
};